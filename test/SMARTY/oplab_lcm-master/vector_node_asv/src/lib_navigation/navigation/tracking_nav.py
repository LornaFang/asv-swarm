"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class tracking_nav(object):
    __slots__ = ["timestamp", "label", "elapse", "waypoint", "timeout", "waypoint_string"]

    def __init__(self):
        self.timestamp = 0.0
        self.label = ""
        self.elapse = 0.0
        self.waypoint = [ 0.0 for dim0 in range(3) ]
        self.timeout = 0.0
        self.waypoint_string = ""

    def encode(self):
        buf = BytesIO()
        buf.write(tracking_nav._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.timestamp))
        __label_encoded = self.label.encode('utf-8')
        buf.write(struct.pack('>I', len(__label_encoded)+1))
        buf.write(__label_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.elapse))
        buf.write(struct.pack('>3d', *self.waypoint[:3]))
        buf.write(struct.pack(">d", self.timeout))
        __waypoint_string_encoded = self.waypoint_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__waypoint_string_encoded)+1))
        buf.write(__waypoint_string_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tracking_nav._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tracking_nav._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tracking_nav()
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        __label_len = struct.unpack('>I', buf.read(4))[0]
        self.label = buf.read(__label_len)[:-1].decode('utf-8', 'replace')
        self.elapse = struct.unpack(">d", buf.read(8))[0]
        self.waypoint = struct.unpack('>3d', buf.read(24))
        self.timeout = struct.unpack(">d", buf.read(8))[0]
        __waypoint_string_len = struct.unpack('>I', buf.read(4))[0]
        self.waypoint_string = buf.read(__waypoint_string_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tracking_nav in parents: return 0
        tmphash = (0x9e89c6699e60bb2f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tracking_nav._packed_fingerprint is None:
            tracking_nav._packed_fingerprint = struct.pack(">Q", tracking_nav._get_hash_recursive([]))
        return tracking_nav._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

