"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pid(object):
    __slots__ = ["timestamp", "input", "input_derivative", "input_integrated", "control_command", "pid_string"]

    def __init__(self):
        self.timestamp = 0.0
        self.input = [ 0.0 for dim0 in range(3) ]
        self.input_derivative = [ 0.0 for dim0 in range(3) ]
        self.input_integrated = [ 0.0 for dim0 in range(3) ]
        self.control_command = [ 0.0 for dim0 in range(3) ]
        self.pid_string = ""

    def encode(self):
        buf = BytesIO()
        buf.write(pid._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.timestamp))
        buf.write(struct.pack('>3d', *self.input[:3]))
        buf.write(struct.pack('>3d', *self.input_derivative[:3]))
        buf.write(struct.pack('>3d', *self.input_integrated[:3]))
        buf.write(struct.pack('>3d', *self.control_command[:3]))
        __pid_string_encoded = self.pid_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__pid_string_encoded)+1))
        buf.write(__pid_string_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pid._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pid._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pid()
        self.timestamp = struct.unpack(">d", buf.read(8))[0]
        self.input = struct.unpack('>3d', buf.read(24))
        self.input_derivative = struct.unpack('>3d', buf.read(24))
        self.input_integrated = struct.unpack('>3d', buf.read(24))
        self.control_command = struct.unpack('>3d', buf.read(24))
        __pid_string_len = struct.unpack('>I', buf.read(4))[0]
        self.pid_string = buf.read(__pid_string_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if pid in parents: return 0
        tmphash = (0xbb6c867a07ed781e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pid._packed_fingerprint is None:
            pid._packed_fingerprint = struct.pack(">Q", pid._get_hash_recursive([]))
        return pid._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

