"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class env(object):
    __slots__ = ["timestamp", "humidity", "temperature", "pressure", "humidity_string", "temperature_string", "pressure_string"]

    def __init__(self):
        self.timestamp = 0.0
        self.humidity = 0.0
        self.temperature = 0.0
        self.pressure = 0.0
        self.humidity_string = ""
        self.temperature_string = ""
        self.pressure_string = ""

    def encode(self):
        buf = BytesIO()
        buf.write(env._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddd", self.timestamp, self.humidity, self.temperature, self.pressure))
        __humidity_string_encoded = self.humidity_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__humidity_string_encoded)+1))
        buf.write(__humidity_string_encoded)
        buf.write(b"\0")
        __temperature_string_encoded = self.temperature_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__temperature_string_encoded)+1))
        buf.write(__temperature_string_encoded)
        buf.write(b"\0")
        __pressure_string_encoded = self.pressure_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__pressure_string_encoded)+1))
        buf.write(__pressure_string_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != env._get_packed_fingerprint():
            raise ValueError("Decode error")
        return env._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = env()
        self.timestamp, self.humidity, self.temperature, self.pressure = struct.unpack(">dddd", buf.read(32))
        __humidity_string_len = struct.unpack('>I', buf.read(4))[0]
        self.humidity_string = buf.read(__humidity_string_len)[:-1].decode('utf-8', 'replace')
        __temperature_string_len = struct.unpack('>I', buf.read(4))[0]
        self.temperature_string = buf.read(__temperature_string_len)[:-1].decode('utf-8', 'replace')
        __pressure_string_len = struct.unpack('>I', buf.read(4))[0]
        self.pressure_string = buf.read(__pressure_string_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if env in parents: return 0
        tmphash = (0x72a25e551a583562) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if env._packed_fingerprint is None:
            env._packed_fingerprint = struct.pack(">Q", env._get_hash_recursive([]))
        return env._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

