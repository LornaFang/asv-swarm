"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class qualisys(object):
    __slots__ = ["global_or_local_m", "westings", "northings", "latitude", "longitude", "heading_degrees", "data_integrity", "gpgga", "hehdt"]

    def __init__(self):
        self.global_or_local_m = 0
        self.westings = 0.0
        self.northings = 0.0
        self.latitude = 0.0
        self.longitude = 0.0
        self.heading_degrees = 0.0
        self.data_integrity = 0
        self.gpgga = ""
        self.hehdt = ""

    def encode(self):
        buf = BytesIO()
        buf.write(qualisys._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bdddddb", self.global_or_local_m, self.westings, self.northings, self.latitude, self.longitude, self.heading_degrees, self.data_integrity))
        __gpgga_encoded = self.gpgga.encode('utf-8')
        buf.write(struct.pack('>I', len(__gpgga_encoded)+1))
        buf.write(__gpgga_encoded)
        buf.write(b"\0")
        __hehdt_encoded = self.hehdt.encode('utf-8')
        buf.write(struct.pack('>I', len(__hehdt_encoded)+1))
        buf.write(__hehdt_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != qualisys._get_packed_fingerprint():
            raise ValueError("Decode error")
        return qualisys._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = qualisys()
        self.global_or_local_m, self.westings, self.northings, self.latitude, self.longitude, self.heading_degrees, self.data_integrity = struct.unpack(">bdddddb", buf.read(42))
        __gpgga_len = struct.unpack('>I', buf.read(4))[0]
        self.gpgga = buf.read(__gpgga_len)[:-1].decode('utf-8', 'replace')
        __hehdt_len = struct.unpack('>I', buf.read(4))[0]
        self.hehdt = buf.read(__hehdt_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if qualisys in parents: return 0
        tmphash = (0xc3df8c382df98c73) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if qualisys._packed_fingerprint is None:
            qualisys._packed_fingerprint = struct.pack(">Q", qualisys._get_hash_recursive([]))
        return qualisys._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

