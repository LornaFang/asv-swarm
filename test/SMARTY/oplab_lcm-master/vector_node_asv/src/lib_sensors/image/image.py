"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class image(object):
    __slots__ = ["timestamp", "count", "filename", "image_string"]

    def __init__(self):
        self.timestamp = 0.0
        self.count = 0
        self.filename = ""
        self.image_string = ""

    def encode(self):
        buf = BytesIO()
        buf.write(image._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dq", self.timestamp, self.count))
        __filename_encoded = self.filename.encode('utf-8')
        buf.write(struct.pack('>I', len(__filename_encoded)+1))
        buf.write(__filename_encoded)
        buf.write(b"\0")
        __image_string_encoded = self.image_string.encode('utf-8')
        buf.write(struct.pack('>I', len(__image_string_encoded)+1))
        buf.write(__image_string_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = image()
        self.timestamp, self.count = struct.unpack(">dq", buf.read(16))
        __filename_len = struct.unpack('>I', buf.read(4))[0]
        self.filename = buf.read(__filename_len)[:-1].decode('utf-8', 'replace')
        __image_string_len = struct.unpack('>I', buf.read(4))[0]
        self.image_string = buf.read(__image_string_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if image in parents: return 0
        tmphash = (0xc47e645cdbcaded7) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if image._packed_fingerprint is None:
            image._packed_fingerprint = struct.pack(">Q", image._get_hash_recursive([]))
        return image._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

